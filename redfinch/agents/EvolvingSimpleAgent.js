import { SimpleAgent } from './SimpleAgent';

class EvolvingSimpleAgent extends SimpleAgent{
    constructor(genes, fitness) {
        super(genes);

        /*
        fitness: {
            score: 0,
            normalized: 0
        }
        */

        this.fitness = fitness;
    }

    get fitness() {
        return this.fitness;
    }

    set fitness(fitness) {
        if(fitness == null || fitness == undefined) throw "Fitness is invalid" 
        this.fitness = {...this.fitness, ...fitness};
    }

    /**
     * Cross the genes of this agent with those of another agent.
     * @param  {EvolvingSimpleAgent} agent The agent to cross genes with
     * @return {Array}      The genes generated by crossing the agents' genes
     */
    cross(agent) {
        return Cross.random(agent);
    }

    /**
     * Generate mutated genes from this agent's current genes.
     * @return {Array}      The genes generated by the mutation algorithm.
     */
    mutate() {
        return Mutate.random(this);
    }

    getFlattened() {
        return [...this.genes];
    }

    setFlattened(flattened) {
        this.setGenes(flattened);
    }
}

export { EvolvingSimpleAgent };